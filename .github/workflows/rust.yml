name: CI

on:
  push:
    branches: [ "main" ]
    tags: [ "v*", "release-*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  ARTIFACT_RETENTION_DAYS: 14

jobs:
  build-and-test:
    name: "Build and check (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2
      - name: Preflight cargo check (release)
        run: cargo check --release --features rustls-tls --lib --bins
      - name: Build (release)
        run: cargo build --release --features rustls-tls
      - name: "Smoke test: print help and exit"
        run: cargo run --release --features rustls-tls -- --help

  build-artifacts:
    name: "Build release artifacts (${{ matrix.os }})"
    needs: build-and-test
    # Run on pushes to main or tags; keep publish gated to tags
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2
      - name: Build (release)
        run: cargo build --release --features rustls-tls

      # Windows packaging: zip the .exe
      - name: Prepare artifact (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -Path dist -ItemType Directory -Force | Out-Null
          Copy-Item -Path "target/release/appian-deployment-cli.exe" -Destination "dist/appian-deployment-cli-windows.exe" -Force
          Compress-Archive -Path "dist/appian-deployment-cli-windows.exe" -DestinationPath "dist/appian-deployment-cli-windows.zip" -Force
          Remove-Item -Force "dist/appian-deployment-cli-windows.exe"
      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-binary
          path: dist/*.zip
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      # Linux packaging: tar.gz the binary
      - name: Prepare artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          mkdir -p dist
          cp target/release/appian-deployment-cli dist/appian-deployment-cli-linux
          tar -czf dist/appian-deployment-cli-linux.tar.gz -C dist appian-deployment-cli-linux
          rm -f dist/appian-deployment-cli-linux
      - name: Upload artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-binary
          path: dist/*.tar.gz
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      # macOS packaging: tar.gz the binary
      - name: Prepare artifact (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          mkdir -p dist
          cp target/release/appian-deployment-cli dist/appian-deployment-cli-macos
          tar -czf dist/appian-deployment-cli-macos.tar.gz -C dist appian-deployment-cli-macos
          rm -f dist/appian-deployment-cli-macos
      - name: Upload artifact (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-binary
          path: dist/*.tar.gz
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: build-artifacts
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-binary"
          merge-multiple: true
          path: dist
      - name: Publish release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}